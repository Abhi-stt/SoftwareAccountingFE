"use client"

import { useState, useEffect } from "react"
import { DashboardLayout } from "@/components/dashboard-layout"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Plus, Search, Filter, Download, Eye, Edit, Trash2, Truck } from "lucide-react"
import { useRouter } from "next/navigation"
import { io as socketIOClient } from "socket.io-client"
import { Select } from "@/components/ui/select"

const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:5000/api"

interface DeliveryItem {
  productId: string
  quantity: number
  description: string
  _id: string
}

interface DeliveryChallan {
  id: string
  _id?: string
  challanNumber?: string
  customer?: { name: string } | string
  date: string
  type: string
  items: number | DeliveryItem[] // Can be either count or array of items
  totalQty: number
  status: string
  invoiceRef?: string
}

// Update PurchaseChallan interface
type PurchaseChallan = {
  _id?: string;
  challanNumber?: string;
  vendorId?: { _id: string; name: string } | string;
  date?: string;
  items?: any[];
  status?: string;
};

export default function DeliveryPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [deliveryChallans, setDeliveryChallans] = useState<DeliveryChallan[]>([])
  const [loadingChallans, setLoadingChallans] = useState(true)
  const [errorChallans, setErrorChallans] = useState("")
  const router = useRouter()

  const [showDeliveryModal, setShowDeliveryModal] = useState(false)
  const [showPurchaseModal, setShowPurchaseModal] = useState(false)
  const [deliveryForm, setDeliveryForm] = useState({ customer: '', date: '', items: '', status: 'Delivered' })
  const [purchaseForm, setPurchaseForm] = useState({ vendor: '', date: '', type: '', items: '', status: 'Received' })
  const [purchaseChallans, setPurchaseChallans] = useState<PurchaseChallan[]>([])
  const [loadingPurchaseChallans, setLoadingPurchaseChallans] = useState(true)
  const [errorPurchaseChallans, setErrorPurchaseChallans] = useState("")

  const [showPurchaseChallanModal, setShowPurchaseChallanModal] = useState(false)
  const [purchaseChallanForm, setPurchaseChallanForm] = useState({ vendor: '', date: '', items: '', status: 'Received' })
  const [vendors, setVendors] = useState<{ _id: string, name: string }[]>([])

  const handleSaveDelivery = async () => {
    try {
      const token = localStorage.getItem('token')
      const headers: Record<string, string> = token ? { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } : { 'Content-Type': 'application/json' }
      // For now, items is just a count, so create an array of dummy items
      const itemsArr = deliveryForm.items ? Array.from({ length: parseInt(deliveryForm.items) }, (_, i) => ({ productId: null, quantity: 1, description: `Item ${i+1}` })) : []
      const res = await fetch(`${API_BASE_URL}/delivery-challans`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          // challanNumber can be auto-generated by backend
          customer: deliveryForm.customer, // If backend expects customerId, update this to customerId
          date: deliveryForm.date,
          items: itemsArr,
          status: deliveryForm.status,
        }),
      })
      if (!res.ok) throw new Error('Failed to save delivery challan')
      setShowDeliveryModal(false)
      setDeliveryForm({ customer: '', date: '', items: '', status: 'Delivered' })
      // Refresh list
      const token2 = localStorage.getItem('token')
      const headers2: Record<string, string> = token2 ? { Authorization: `Bearer ${token2}` } : {}
      const res2 = await fetch(`${API_BASE_URL}/delivery-challans`, { headers: headers2 })
      setDeliveryChallans(await res2.json())
      alert('Delivery Challan created successfully!')
    } catch (err: any) {
      alert('Error saving delivery challan: ' + (err.message || err))
    }
  }
  const handleSavePurchase = async () => {
    if (!purchaseForm.vendor) {
      alert("Please select a vendor.");
      return;
    }
    try {
      const token = localStorage.getItem('token')
      const headers: Record<string, string> = token ? { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } : { 'Content-Type': 'application/json' }
      // For now, items is just a count, so create an array of dummy items
      const itemsArr = purchaseForm.items ? Array.from({ length: parseInt(purchaseForm.items) }, (_, i) => ({ productId: null, quantity: 1, description: `Item ${i+1}` })) : []
      const res = await fetch(`${API_BASE_URL}/purchase-delivery-challans`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          vendorId: purchaseForm.vendor, // Should be ObjectId
          date: purchaseForm.date,
          items: itemsArr,
          status: purchaseForm.status,
        }),
      })
      if (!res.ok) throw new Error('Failed to save purchase delivery challan')
      setShowPurchaseModal(false)
      setPurchaseForm({ vendor: '', date: '', type: '', items: '', status: 'Received' })
      // Refresh list
      const token2 = localStorage.getItem('token')
      const headers2: Record<string, string> = token2 ? { Authorization: `Bearer ${token2}` } : {}
      const res2 = await fetch(`${API_BASE_URL}/purchase-delivery-challans`, { headers: headers2 })
      setPurchaseChallans(await res2.json())
      alert('Purchase Delivery Challan created successfully!')
    } catch (err: any) {
      alert('Error saving purchase delivery challan: ' + (err.message || err))
    }
  }

  const handleSavePurchaseChallan = async () => {
    if (!purchaseChallanForm.vendor) {
      alert("Please select a vendor.");
      return;
    }
    try {
      const token = localStorage.getItem('token')
      const headers: Record<string, string> = token ? { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } : { 'Content-Type': 'application/json' }
      const itemsArr = purchaseChallanForm.items ? Array.from({ length: parseInt(purchaseChallanForm.items) }, (_, i) => ({ productId: null, quantity: 1, description: `Item ${i+1}` })) : []
      const res = await fetch(`${API_BASE_URL}/purchase-challans`, {
        method: 'POST',
        headers,
        body: JSON.stringify({
          vendorId: purchaseChallanForm.vendor,
          date: purchaseChallanForm.date,
          items: itemsArr,
          status: purchaseChallanForm.status,
        }),
      })
      if (!res.ok) throw new Error('Failed to save purchase challan')
      setShowPurchaseChallanModal(false)
      setPurchaseChallanForm({ vendor: '', date: '', items: '', status: 'Received' })
      // Refresh list
      const token2 = localStorage.getItem('token')
      const headers2: Record<string, string> = token2 ? { Authorization: `Bearer ${token2}` } : {}
      const res2 = await fetch(`${API_BASE_URL}/purchase-challans`, { headers: headers2 })
      setPurchaseChallans(await res2.json())
      alert('Purchase Challan created successfully!')
    } catch (err: any) {
      alert('Error saving purchase challan: ' + (err.message || err))
    }
  }

  useEffect(() => {
    const fetchChallans = async () => {
      setLoadingChallans(true)
      setErrorChallans("")
      try {
        const token = localStorage.getItem("token")
        const res = await fetch(`${API_BASE_URL}/delivery-challans`, {
          headers: token ? { Authorization: `Bearer ${token}` } : {},
        })
        if (!res.ok) {
          if (res.status === 401 || res.status === 403) {
            localStorage.removeItem("token")
            localStorage.removeItem("user")
            router.push("/login")
            return
          }
          throw new Error("Failed to fetch delivery challans")
        }
        const data = await res.json()
        setDeliveryChallans(data || [])
      } catch (err: any) {
        setErrorChallans(err.message || "Error fetching delivery challans")
      } finally {
        setLoadingChallans(false)
      }
    }
    fetchChallans()

    const socket = socketIOClient("http://localhost:5000")
    socket.on("deliverychallan:created", fetchChallans)
    socket.on("deliverychallan:updated", fetchChallans)
    socket.on("deliverychallan:deleted", fetchChallans)
    return () => {
      socket.disconnect()
    }
  }, [router])

  const fetchPurchaseChallans = async () => {
    setLoadingPurchaseChallans(true)
    setErrorPurchaseChallans("")
    try {
      const token = localStorage.getItem('token')
      const headers: Record<string, string> = token ? { Authorization: `Bearer ${token}` } : {}
      const res = await fetch(`${API_BASE_URL}/purchase-challans`, { headers })
      if (!res.ok) throw new Error('Failed to fetch purchase challans')
      setPurchaseChallans(await res.json())
    } catch (err: any) {
      setErrorPurchaseChallans(err.message || 'Error fetching purchase challans')
    } finally {
      setLoadingPurchaseChallans(false)
    }
  }

  useEffect(() => {
    fetchPurchaseChallans()
    const socket = socketIOClient("http://localhost:5000")
    socket.on("purchasechallan:created", fetchPurchaseChallans)
    socket.on("purchasechallan:updated", fetchPurchaseChallans)
    socket.on("purchasechallan:deleted", fetchPurchaseChallans)
    return () => {
      socket.disconnect()
    }
  }, [router])

  useEffect(() => {
    // Fetch vendors for dropdowns
    const fetchVendors = async () => {
      try {
        const token = localStorage.getItem('token')
        const headers: Record<string, string> = token ? { Authorization: `Bearer ${token}` } : {}
        const res = await fetch(`${API_BASE_URL}/vendors`, { headers })
        if (res.ok) {
          const data = await res.json()
          setVendors(data)
        }
      } catch {}
    }
    fetchVendors()
  }, [])

  const getStatusColor = (status: string) => {
    switch (status) {
      case "Delivered":
      case "Received":
        return "bg-green-100 text-green-800"
      case "In Transit":
        return "bg-blue-100 text-blue-800"
      case "Pending":
        return "bg-yellow-100 text-yellow-800"
      case "Cancelled":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getTypeColor = (type: string) => {
    switch (type) {
      case "Delivery Before Invoice":
        return "bg-blue-100 text-blue-800"
      case "Job Work":
        return "bg-purple-100 text-purple-800"
      case "Return Delivery":
        return "bg-orange-100 text-orange-800"
      case "Goods Receipt":
        return "bg-green-100 text-green-800"
      case "Job Work Return":
        return "bg-yellow-100 text-yellow-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const filteredDeliveryChallans = deliveryChallans.filter(
    (challan) =>
      (typeof challan.customer === 'object' 
        ? challan.customer?.name || ""
        : challan.customer || "").toLowerCase().includes(searchTerm.toLowerCase()) ||
      (challan.challanNumber || challan.id || "").toLowerCase().includes(searchTerm.toLowerCase())
  )

  const filteredPurchaseChallans = purchaseChallans.filter(
    (challan) => {
      const vendorString =
        typeof challan.vendorId === 'object'
          ? challan.vendorId?.name || ''
          : challan.vendorId || '';
      return (
        vendorString.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (challan.challanNumber || '').toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
  )

  const totalDeliveries = deliveryChallans.length
  const totalPurchases = filteredPurchaseChallans.length
  const inTransitDeliveries = deliveryChallans.filter((d) => d.status === "In Transit").length
  const inTransitPurchases = filteredPurchaseChallans.filter((p) => p.status === "In Transit").length

  // Helper function to get item count
  const getItemCount = (items: number | DeliveryItem[]): number => {
    return Array.isArray(items) ? items.length : items
  }

  if (loadingChallans) {
    return (
      <DashboardLayout>
        <div className="flex justify-center items-center h-64">
          <p>Loading delivery data...</p>
        </div>
      </DashboardLayout>
    )
  }

  if (errorChallans) {
    return (
      <DashboardLayout>
        <div className="flex justify-center items-center h-64 text-red-600">
          <p>{errorChallans}</p>
        </div>
      </DashboardLayout>
    )
  }

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header and buttons */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold">Delivery & Challan Management</h1>
            <p className="text-gray-600">Manage delivery challans and purchase receipts</p>
          </div>
          <div className="flex gap-2">
            <Button onClick={() => setShowPurchaseChallanModal(true)}>
              <Plus className="h-4 w-4 mr-2" />
              New Purchase Challan
            </Button>
            <Button onClick={() => setShowDeliveryModal(true)}>
              <Plus className="h-4 w-4 mr-2" />
              New Delivery Challan
            </Button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid gap-4 md:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Deliveries</CardTitle>
              <Truck className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{totalDeliveries}</div>
              <p className="text-xs text-muted-foreground">This month</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Receipts</CardTitle>
              <Truck className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{totalPurchases}</div>
              <p className="text-xs text-muted-foreground">This month</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">In Transit (Out)</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{inTransitDeliveries}</div>
              <p className="text-xs text-muted-foreground">Pending delivery</p>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">In Transit (In)</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{inTransitPurchases}</div>
              <p className="text-xs text-muted-foreground">Pending receipt</p>
            </CardContent>
          </Card>
        </div>

        <Tabs defaultValue="delivery" className="w-full">
          <TabsList>
            <TabsTrigger value="delivery">Delivery Challans</TabsTrigger>
            <TabsTrigger value="purchase">Purchase Challans</TabsTrigger>
          </TabsList>
          <TabsContent value="delivery">
            {/* Delivery Challans Table */}
            <Card className="mt-8">
              <CardHeader>
                <CardTitle>Delivery Challans</CardTitle>
              </CardHeader>
              <CardContent>
                {loadingChallans ? (
                  <div>Loading...</div>
                ) : errorChallans ? (
                  <div className="text-red-500">{errorChallans}</div>
                ) : deliveryChallans.length === 0 ? (
                  <div>No delivery challans found</div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Challan Number</TableHead>
                        <TableHead>Customer</TableHead>
                        <TableHead>Date</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Items</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {deliveryChallans.map((challan) => (
                        <TableRow key={challan._id || challan.challanNumber}>
                          <TableCell>{challan.challanNumber || challan._id}</TableCell>
                          <TableCell>{typeof challan.customer === 'object' ? challan.customer?.name : (challan.customer || '')}</TableCell>
                          <TableCell>{challan.date ? new Date(challan.date).toLocaleDateString() : ''}</TableCell>
                          <TableCell>{challan.status || ''}</TableCell>
                          <TableCell>{Array.isArray(challan.items) ? challan.items.length : 0}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>
          </TabsContent>
          <TabsContent value="purchase">
            {/* Purchase Challans Table */}
            <Card className="mt-8">
              <CardHeader>
                <CardTitle>Purchase Challans</CardTitle>
              </CardHeader>
              <CardContent>
                {loadingPurchaseChallans ? (
                  <div>Loading...</div>
                ) : errorPurchaseChallans ? (
                  <div className="text-red-500">{errorPurchaseChallans}</div>
                ) : purchaseChallans.length === 0 ? (
                  <div>No purchase challans found</div>
                ) : (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Challan Number</TableHead>
                        <TableHead>Vendor</TableHead>
                        <TableHead>Date</TableHead>
                        <TableHead>Status</TableHead>
                        <TableHead>Items</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {purchaseChallans.map((challan) => (
                        <TableRow key={challan._id || challan.challanNumber}>
                          <TableCell>{challan.challanNumber || challan._id}</TableCell>
                          <TableCell>{typeof challan.vendorId === 'object' ? challan.vendorId?.name : (challan.vendorId || '')}</TableCell>
                          <TableCell>{challan.date ? new Date(challan.date).toLocaleDateString() : ''}</TableCell>
                          <TableCell>{challan.status || ''}</TableCell>
                          <TableCell>{Array.isArray(challan.items) ? challan.items.length : 0}</TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
      {showDeliveryModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-96">
            <CardHeader>
              <CardTitle>New Delivery Challan</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Input value={deliveryForm.customer} onChange={e => setDeliveryForm(f => ({ ...f, customer: e.target.value }))} placeholder="Customer Name or ID" />
              <Input type="date" value={deliveryForm.date} onChange={e => setDeliveryForm(f => ({ ...f, date: e.target.value }))} />
              <Input type="number" value={deliveryForm.items} onChange={e => setDeliveryForm(f => ({ ...f, items: e.target.value }))} placeholder="Number of Items" />
              <Button onClick={handleSaveDelivery} className="w-full">Save</Button>
              <Button variant="outline" onClick={() => setShowDeliveryModal(false)} className="w-full">Cancel</Button>
            </CardContent>
          </Card>
        </div>
      )}
      {showPurchaseModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-96">
            <CardHeader>
              <CardTitle>New Purchase Challan</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Select value={purchaseForm.vendor} onValueChange={val => setPurchaseForm(f => ({ ...f, vendor: val }))}>
                <option value="">Select Vendor</option>
                {vendors.map(v => (
                  <option key={v._id} value={v._id}>{v.name}</option>
                ))}
              </Select>
              <Input type="date" value={purchaseForm.date} onChange={e => setPurchaseForm(f => ({ ...f, date: e.target.value }))} />
              <Input type="number" value={purchaseForm.items} onChange={e => setPurchaseForm(f => ({ ...f, items: e.target.value }))} placeholder="Number of Items" />
              <Button onClick={handleSavePurchase} className="w-full">Save</Button>
              <Button variant="outline" onClick={() => setShowPurchaseModal(false)} className="w-full">Cancel</Button>
            </CardContent>
          </Card>
        </div>
      )}
      {showPurchaseChallanModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <Card className="w-96">
            <CardHeader>
              <CardTitle>New Purchase Challan</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <select
                value={purchaseChallanForm.vendor}
                onChange={e => setPurchaseChallanForm(f => ({ ...f, vendor: e.target.value }))}
                required
                className="w-full border rounded px-3 py-2 mb-2"
              >
                <option value="">Select Vendor</option>
                {vendors.map(v => (
                  <option key={v._id} value={v._id}>{v.name}</option>
                ))}
              </select>
              <Input type="date" value={purchaseChallanForm.date} onChange={e => setPurchaseChallanForm(f => ({ ...f, date: e.target.value }))} />
              <Input type="number" value={purchaseChallanForm.items} onChange={e => setPurchaseChallanForm(f => ({ ...f, items: e.target.value }))} placeholder="Number of Items" />
              <Button onClick={handleSavePurchaseChallan} className="w-full">Save</Button>
              <Button variant="outline" onClick={() => setShowPurchaseChallanModal(false)} className="w-full">Cancel</Button>
            </CardContent>
          </Card>
        </div>
      )}
    </DashboardLayout>
  )
}